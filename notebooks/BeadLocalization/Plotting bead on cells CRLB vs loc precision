{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "21d91658",
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05604fc3-f687-4e3c-b475-06f23113b120",
   "metadata": {},
   "source": [
    "### Generated synthetic data by placing beads on cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "09b23adc-a6dd-4f39-be27-1cffc54313eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pathlib\n",
    "from pathlib import Path\n",
    "%matplotlib qt5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c0dcc47a-30ff-4fdc-9eb1-14fd6d867ffc",
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bbbaeb5b-107b-41f4-8f03-75b82b67b314",
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA_DIR = Path('/mnt/sda1/SMLAT/data/real_data/only_beads/synthetic_data_localizations/')\n",
    "for filename in sorted(list(DATA_DIR.glob('*.json'))):\n",
    "    with open(filename, 'r') as fh:\n",
    "        data = json.load(fh)\n",
    "        #print(f\"Number of beads: {len(data)}\")\n",
    "        if len(data) != 0:\n",
    "            all_data.extend(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30fcd977-5619-4ee6-9a90-5dcc03f620bd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e4060880-1914-453c-950c-5abf5eed250d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1098"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(all_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1f6b9811-0d1d-4e7e-830a-0c97e944ba1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['bead_no', 'x', 'y', 'z', 'ph', 'x_sigma', 'y_sigma', 'z_sigma', 'ph_sigma'])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_data[0].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ac2c31e-7f54-468b-aa61-688cc0b8bcd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "photon_counts = [np.mean(one_bead['ph']) for one_bead in all_data]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7f7265e6-fe02-4059-9193-7fa2c3b85c28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1743.3776761590534"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(photon_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ba7a0331-5201-4fac-9f3d-8e0b18107891",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "792.2509969075521"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.min(photon_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "646cb399-c91f-4b9b-a3e7-a5a8c217a470",
   "metadata": {},
   "outputs": [],
   "source": [
    "tuples = [(np.mean(one_bead['z']), np.std(one_bead['x']), np.std(one_bead['y']), np.std(one_bead['z']), len(one_bead['z']), np.mean(one_bead['ph']))\n",
    "          for one_bead in all_data\n",
    "                     if len(one_bead['z']) > 30 and np.mean(one_bead['ph']) > 700.0\n",
    "         ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1c316975-bf09-46cf-9e72-5944eddde222",
   "metadata": {},
   "outputs": [],
   "source": [
    "counts = [len(one_bead['z']) for one_bead in all_data]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e1ae774-0dd5-4ca3-a881-b1da11922a09",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b1cf0403-8d31-4302-ad32-311d5d78b509",
   "metadata": {},
   "outputs": [],
   "source": [
    "z_values = [bead[0] for bead in tuples]\n",
    "x_std = [bead[1] for bead in tuples]\n",
    "y_std = [bead[2] for bead in tuples]\n",
    "z_std = [bead[3] for bead in tuples]\n",
    "ph_counts = [bead[5] for bead in tuples]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bcf2ed08-8102-47fb-ab80-b319e6f6179b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1802.92192668594"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(ph_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02828082-9b1a-45c5-b4f4-f80361a3de4e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d6d32de1-13dc-4657-806d-fed67491ca9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(924, 1802.92192668594)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(z_values), np.mean(ph_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe794522-bb57-425e-b6d7-be7bc8f0eb08",
   "metadata": {},
   "source": [
    "plt.figure()\n",
    "plt.plot(z_values, x_std, 'r*')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25d95d56-fd9e-442b-bb85-e54e630aac82",
   "metadata": {},
   "source": [
    "plt.figure()\n",
    "plt.plot(z_values, y_std, 'b*')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f70694d3-c9b7-406f-ac9b-2b41bc6ef388",
   "metadata": {},
   "source": [
    "plt.figure()\n",
    "plt.plot(z_values, z_std, 'g*')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6744abcb-e13d-440e-b46d-b84c6031db5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "import time\n",
    "import sys\n",
    "import pathlib\n",
    "import pickle\n",
    "from pathlib import Path\n",
    "import matplotlib.animation as animation\n",
    "import seaborn as sns\n",
    "sns.set_style('white')\n",
    "sys.setrecursionlimit(10000)\n",
    "%matplotlib qt5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "14d857f0-5879-4fb4-8c14-15287b97e57b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cellbgnet\n",
    "import cellbgnet.utils\n",
    "from cellbgnet.datasets import DataSimulator\n",
    "from cellbgnet.utils.hardware import cpu, gpu\n",
    "from cellbgnet.model import CellBGModel\n",
    "from cellbgnet.utils.plot_funcs import plot_od, plot_train_record\n",
    "from cellbgnet.simulation.psf_kernel import SMAPSplineCoefficient\n",
    "from cellbgnet.analyze_eval import spline_crlb_plot\n",
    "from cellbgnet.utils.plot_funcs import plot_psf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7f365e86-9c09-4c4b-a7f6-116d7562ea08",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_path = Path('/mnt/sda1/SMLAT/training_runs/good_models/model_8865_venus.pkl')\n",
    "with open(model_path, 'rb') as f:\n",
    "    chromo_model = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f14c33ef-520f-4284-abb1-e3654d9bb249",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'train_size': 128,\n",
       " 'train_type': 'cells',\n",
       " 'psf_intensity_normalization': True,\n",
       " 'density': 0.003125,\n",
       " 'non_cell_density': 10,\n",
       " 'margin_empty': 0.05,\n",
       " 'z_prior': [-1, 1],\n",
       " 'survival_prob': None,\n",
       " 'min_photon': 0.4,\n",
       " 'camera': 'sCMOS',\n",
       " 'camera_chip_size': [1041, 1302],\n",
       " 'perlin_noise': False,\n",
       " 'perlin_noise_factor': 0.2,\n",
       " 'perlin_noise_res': 64,\n",
       " 'baseline': 103.0,\n",
       " 'bg_values': 115.0,\n",
       " 'e_per_adu': 0.4,\n",
       " 'qe': 0.95,\n",
       " 'spurious_c': 0.0,\n",
       " 'sig_read': '/mnt/sda1/SMLAT/data/real_data/chromosome_dots/pooled_8865/RN_e_venus.tiff',\n",
       " 'robust_training': False,\n",
       " 'cell_masks_dir': '/mnt/sda1/SMLAT/data/real_data/chromosome_dots/pooled_8865/phase_venus_mask/',\n",
       " 'cell_masks_filetype': '.png',\n",
       " 'edt_noise_map_path': '/mnt/sda1/SMLAT/data/real_data/chromosome_dots/pooled_8865/edt_noise.pkl',\n",
       " 'min_edt': 0,\n",
       " 'max_edt': 6}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chromo_model.simulation_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef5f56c5-b12f-4313-baa2-012534ff5453",
   "metadata": {},
   "outputs": [],
   "source": [
    "chromo_model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1b9a9f93-faaa-41b4-8f99-04e45b86004e",
   "metadata": {},
   "outputs": [],
   "source": [
    "mol_photons = (chromo_model.data_generator.simulation_params['min_photon'] + 1) /2 * chromo_model.data_generator.psf_params['photon_scale']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d4793d2e-d9c9-46ea-9cdc-1b655f000d4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2875.0"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol_photons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8cdd39e0-1677-451b-8d99-435e7fe68dbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean CRLB x over full z range:-600.0 - 600.0 [nm] is: 12.362032890319824\n",
      "Mean CRLB y over full z range:-600.0 - 600.0 [nm] is  11.97386360168457\n",
      "Mean CRLB z over full z range:-600.0 - 600.0 [nm] is  36.54850769042969\n"
     ]
    }
   ],
   "source": [
    "calib_file = chromo_model.psf_params['calib_file']\n",
    "crlb, rois = spline_crlb_plot(calib_file, z_range=600.0, photon_counts=1947.0, bg_photons=5.8, img_size=41)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "43bf5c91-7620-4b43-a9a4-1e8f91ccba3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = torch.arange(-600.0, 610.0, 10.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "18a9e084-a31b-4ec5-9095-cfe9f2c366fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([121, 5])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crlb.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "60b307e2-2152-4fb5-bfd4-ad61d9435090",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([121])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "36f0dd8e-4487-4b76-b554-8d7f4edea219",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "924"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(x_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4adbc3a9-5602-48ad-b23d-a65ff4439f09",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(nrows=1, ncols = 3, figsize=(16,4))\n",
    "\n",
    "ax[0].plot(z_values, x_std, 'b*', label = 'Bead data')\n",
    "ax[0].plot(z, crlb[:, 0], 'r--', label = r'$\\sqrt{CRLB_{x}}$ (nm) Spline model')\n",
    "ax[0].set_xlim([-500, 500])\n",
    "ax[0].set_ylim([0, 120])\n",
    "ax[0].set_xlabel('Z (nm)', fontsize=16)\n",
    "ax[0].set_ylabel('Localization precision in X (nm)', fontsize=16)\n",
    "ax[0].legend(loc='upper right', fontsize=12)\n",
    "ax[0].tick_params(labelsize=16)\n",
    "\n",
    "ax[1].plot(z_values, y_std, 'g*', label = 'Bead data')\n",
    "ax[1].plot(z, crlb[:, 1], 'r--', label = r'$\\sqrt{CRLB_{y}}$ (nm) Spline model')\n",
    "ax[1].set_xlim([-500, 500])\n",
    "ax[1].set_ylim([0, 120])\n",
    "ax[1].set_xlabel('Z (nm)', fontsize=16)\n",
    "ax[1].set_ylabel('Localization precision in Y (nm)', fontsize=16)\n",
    "ax[1].legend(loc='upper right', fontsize=12)\n",
    "ax[1].tick_params(labelsize=16)\n",
    "\n",
    "ax[2].plot(z_values, z_std, 'k*', label = 'Bead data')\n",
    "ax[2].plot(z, crlb[:, 2], 'r--', label = r'$\\sqrt{CRLB_{z}}$ (nm) Spline model')\n",
    "ax[2].set_xlim([-500, 500])\n",
    "ax[2].set_xlabel('Z (nm)', fontsize=16)\n",
    "ax[2].set_ylabel('Localization precision in Z (nm)', fontsize=16)\n",
    "ax[2].legend(loc='upper right', fontsize=12)\n",
    "ax[2].tick_params(labelsize=16)\n",
    "\n",
    "#fig.delaxes(ax[1, 1])\n",
    "#plt.suptitle(f'N = {len(x_std)} bead total (each localized >= 30 times)', fontsize=16, verticalalignment='baseline')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8aa61fff-3e8d-4882-9d72-0c826e3cce5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "bins = np.linspace(-500, 500, 21)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8b2b18df-3f1c-498e-84fb-fd64371e2852",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-500., -450., -400., -350., -300., -250., -200., -150., -100.,\n",
       "        -50.,    0.,   50.,  100.,  150.,  200.,  250.,  300.,  350.,\n",
       "        400.,  450.,  500.])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e855405e-1caf-4488-973e-4365faf95bb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "digitized = np.digitize(z_values, bins)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f5a1b7fd-44b9-434e-8e2e-9e06888acaa7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(924,)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "digitized.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "298880b7-972c-4c8f-ba24-593339fefa9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_std = np.array(x_std)\n",
    "y_std = np.array(y_std)\n",
    "z_std = np.array(z_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e2abdded-0455-4560-9d4b-7d07877de249",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import median_abs_deviation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53dc483f-112e-4f58-87d8-3d99512f068b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4617b57c-7150-4d42-9661-8504dc966e99",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_432060/1159564542.py:1: RuntimeWarning: Mean of empty slice.\n",
      "  bin_means_x = np.array([(x_std[digitized == i].mean(), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n",
      "/home/pk/miniconda3/envs/bgnet/lib/python3.9/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n",
      "  ret = ret.dtype.type(ret / rcount)\n",
      "/tmp/ipykernel_432060/1159564542.py:3: RuntimeWarning: Mean of empty slice.\n",
      "  bin_means_y = np.array([(y_std[digitized == i].mean(), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n",
      "/tmp/ipykernel_432060/1159564542.py:5: RuntimeWarning: Mean of empty slice.\n",
      "  bin_means_z = np.array([(z_std[digitized == i].mean(), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n"
     ]
    }
   ],
   "source": [
    "bin_means_x = np.array([(x_std[digitized == i].mean(), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n",
    "bin_std_x = np.array([(median_abs_deviation(x_std[digitized == i]), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n",
    "bin_means_y = np.array([(y_std[digitized == i].mean(), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n",
    "bin_std_y = np.array([(median_abs_deviation(y_std[digitized == i]), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n",
    "bin_means_z = np.array([(z_std[digitized == i].mean(), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n",
    "bin_std_z = np.array([(median_abs_deviation(z_std[digitized == i]), (bins[i-1] + bins[i])/2) for i in range(1, len(bins))])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7a4c3a19-044d-4d69-96e3-28a883f8c4e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   4.92219754, -475.        ],\n",
       "       [   4.9093621 , -425.        ],\n",
       "       [   3.83669486, -375.        ],\n",
       "       [   3.07666143, -325.        ],\n",
       "       [   6.92049922, -275.        ],\n",
       "       [   3.87825128, -225.        ],\n",
       "       [   2.73699523, -175.        ],\n",
       "       [   3.38726783, -125.        ],\n",
       "       [   3.18711608,  -75.        ],\n",
       "       [   2.47159023,  -25.        ],\n",
       "       [   2.72485877,   25.        ],\n",
       "       [   2.59072858,   75.        ],\n",
       "       [   3.85963691,  125.        ],\n",
       "       [   3.01923581,  175.        ],\n",
       "       [   1.75364724,  225.        ],\n",
       "       [   0.        ,  275.        ],\n",
       "       [          nan,  325.        ],\n",
       "       [          nan,  375.        ],\n",
       "       [          nan,  425.        ],\n",
       "       [          nan,  475.        ]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin_std_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec7a664e-095d-41c3-a244-1ff180136687",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9673cb81-285c-4ecf-8a26-b7ca4d25d542",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e900f634-a6a0-47e7-aecb-93857fe823e7",
   "metadata": {},
   "source": [
    "### Plotting and saving figures for the binned bead localization plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d994967b-433f-4903-a29b-442553dc2b58",
   "metadata": {},
   "outputs": [],
   "source": [
    "SAVE_DIR = Path('/mnt/sda1/SMLAT/figures/main/beads_crlb')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f092393-fe1b-40e8-bfd6-a0104ed528c0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2fec1d3-cb40-44ac-b56c-ad0792ae53e5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0a63134d-4542-47cc-ae32-551cfc8c77d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "save_x = SAVE_DIR / Path('lprecision_x.pdf')\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1)\n",
    "ax.errorbar(bin_means_x[:, 1], bin_means_x[:, 0], yerr=bin_std_x[:, 0], fmt='bo', label='Bead data', capsize=3)\n",
    "ax.plot(z, crlb[:, 0], 'r--', label = r'$\\sqrt{CRLB_{x}}$ (nm) Spline model')\n",
    "ax.legend(loc='upper right', fontsize=12)\n",
    "ax.set_xlim([-500, 500])\n",
    "ax.set_ylim([0, 50])\n",
    "ax.set_xlabel('Z (nm)', fontsize=16)\n",
    "ax.set_ylabel('Localization precision in X (nm)', fontsize=16)\n",
    "ax.tick_params(labelsize=16)\n",
    "#fig.savefig(save_x, bbox_inches='tight', pad_inches=0, transparent=True, dpi=300)\n",
    "#plt.close(fig)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04d0e275-9d3b-44d4-842d-0c9a0bb84495",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9190f6f-71eb-4257-884c-fb02313ed3fe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f46bbb4-cd51-4661-9925-9ecca470b6fa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "339e489f-82f1-414a-9e23-870dbae3442e",
   "metadata": {},
   "outputs": [],
   "source": [
    "save_x = SAVE_DIR / Path('lprecision_y.pdf')\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1)\n",
    "ax.errorbar(bin_means_y[:, 1], bin_means_y[:, 0], yerr=bin_std_y[:, 0], fmt='go', label='Bead data', capsize=3)\n",
    "ax.plot(z, crlb[:, 1], 'r--', label = r'$\\sqrt{CRLB_{y}}$ (nm) Spline model')\n",
    "ax.legend(loc='upper right', fontsize=12)\n",
    "ax.set_xlim([-500, 500])\n",
    "ax.set_ylim([0, 50])\n",
    "ax.set_xlabel('Z (nm)', fontsize=16)\n",
    "ax.set_ylabel('Localization precision in Y (nm)', fontsize=16)\n",
    "ax.tick_params(labelsize=16)\n",
    "\n",
    "#fig.savefig(save_x, bbox_inches='tight', pad_inches=0, transparent=True, dpi=300)\n",
    "#plt.close(fig)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "066557d4-f23c-4f80-99ae-46698331f559",
   "metadata": {},
   "outputs": [],
   "source": [
    "save_x = SAVE_DIR / Path('lprecision_z.pdf')\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1)\n",
    "ax.errorbar(bin_means_z[:, 1], bin_means_z[:, 0], yerr=bin_std_z[:, 0], fmt='ko', label='Bead data', capsize=3)\n",
    "ax.plot(z, crlb[:, 2], 'r--', label = r'$\\sqrt{CRLB_{z}}$ (nm) Spline model')\n",
    "ax.legend(loc='upper right',fontsize=12)\n",
    "ax.set_xlim([-500, 500])\n",
    "\n",
    "ax.set_xlabel('Z (nm)', fontsize=16)\n",
    "ax.set_ylabel('Localization precision in Z (nm)', fontsize=16)\n",
    "ax.tick_params(labelsize=16)\n",
    "\n",
    "#fig.savefig(save_x, bbox_inches='tight', pad_inches=0, transparent=True, dpi=300)\n",
    "#plt.close(fig)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8de473bf-1bc4-4da0-9f67-44b8e51b1f5d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "75437d56-db22-4c04-a811-461292beb321",
   "metadata": {},
   "source": [
    "### Image stack saved from EXP-24-CB4719/fluorChannelRegistration3D/zStack_locError_103 Position 123 for the figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "d8ed3bcb-893f-4865-ae19-b9484f53c922",
   "metadata": {},
   "outputs": [],
   "source": [
    "from skimage.io import imread"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "9ccc2ec3-a5eb-48fd-95f2-510b9c15a7b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "stack_dir = Path('/mnt/sda1/SMLAT/figures/main/beads_crlb/stack/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1ea97fc4-da5a-4af4-9bc2-1465b0b3fa88",
   "metadata": {},
   "outputs": [],
   "source": [
    "images_filenames = sorted(list(stack_dir.glob('*.png')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "5af3e2b8-a3cc-42f5-8699-8adb1f5775c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "images = [imread(filename) for filename in images_filenames]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35660b20-4010-4f3d-88b9-f410d5d9d586",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "0bdb7740-28f3-4ffa-805e-fdf4610759f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i, image in enumerate(images, 0):\n",
    "    save_path = Path('/mnt/sda1/SMLAT/figures/main/beads_crlb/stack_cmapped/') / Path(images_filenames[i].name)\n",
    "    fig, ax = plt.subplots(nrows=1, ncols=1)\n",
    "    ax.imshow(image, cmap='gray')\n",
    "    ax.set_axis_off()\n",
    "    fig.savefig(save_path, bbox_inches='tight', pad_inches=0, transparent=True, dpi=300)\n",
    "    plt.close(fig)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc58fc9b-4cfa-4bc0-ad1e-5d63cc460e3e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
